# Benchmarks HK take home assignment

Your task is to create an implementation of the AuthenticationService interface. Feel free to implement any other
interfaces you feel necessary, or add additional classes and interfaces, but do try to keep your code simple.  Do not
CHANGE any of the provided interfaces.

You also MUST update the AccessPoint class - make sure the function in it returns a fully constructed instance of your
service implementation.

Methods that can fail should throw derivatives of RuntimeException with meaningful descriptions.

Make sure your solution has comprehensive unit tests.

If you use external libraries outside of the standard JDK, please mention in the README and explain their purpose. Your
goal should be to use as few external libraries as possible.

You have 48 hrs to complete the exercise from the point it's received. Once done, pls return the submission via email
or public Github (and then send us the details).

The files for the project can be found below. Save them into the appropriate directory structure first.

Feel free to add whatever comments regarding your implementation below the line.


=======================================================================================================

# Solution design

## AuthenticationService interface

AuthenticationService interface is implemented by InMemoryAuthenticationService class.
No changes to interface introduced, however runtime exceptions are thrown which should be included in signatures (such as InvalidTokenException and InvalidOperationException). Exceptions are documented in method comments.
AuthenticationService parameters currently passed in constructor must be refactored for proper injection (e.g. from configuration files or secret files)

## Users and roles

Following policies/assumptions were applied:

1. Role names and usernames are case-insensitive.
1. User names are canonized to upper case for uniformity after creation.
1. User names must only contain alphanumeric characters or underscore
1. Passwords must be 12 symbols or more, contain at least one uppercase character, one lowercase character, one number, and one symbol (not counting for underscore) or space.

## Cryptography

* Passwords are stored in form of salted hashes using PBKDF2 algorithm with 50000 passess. This protects from dictionary or brute force attacks in case of hash database leaking (i.e. users dicrionary). Salts are generated by the service
* Tokens are generated with HMAC SHA512 signatures and include username and expiry times.
    * only immutable claims (i.e. username) are included in tokens. Roles are not included to ensure newly added roles get applied to existing tokens as well as new tokens
    * service caller is required to ensure uniqueness of salt for each `authenticate` call with the same username. Reusing the salt may result in generating same tokens (so invalidation will affect both tokens at once)
    * tokens are not stored within the service, to reduce memory consumption / writes to database / syncs between nodes in horizontal scaling scenario
    * invalidated tokens need to be stored (and synchronized across nodes if needed / persisted in storage)
    * tokens are tamper resistent

# Not implemented features and NFRs

Below NFRs are critical for production use but not implemented currently due to resource constraints.

## Persistence

Persistence is NOT implemented currently. 
Folliwing data tables need to be persisted:

InMemoryAuthenticationService.users
InMemoryAuthenticationService.roles
InMemoryAuthenticationService.tokenService.invalidatedTokens

## Audit and logging

Logging is NOT implemented currently. 

All material calls (writes to users/roles, role assignments) need to be logged for audit reasons

Authentication failures should be logged for audit reasons.

## Additional security policies

Following policies should be considered for production usage:
* Account lockout 
* Customizable password policies
